/* Reset CSS */
* {
    box-sizing: border-box;
    padding: 0;
    margin: 0;
}

body {
    font-family: 'Open Sans', sans-serif;
    font-size: 16px;
    line-height: 1.5;
    color: #333;
    background: #f5f5f5;
}

/* Center things but keep a max-width of 960px */
.container {
    max-width: 960px;
    margin: 100px auto;
    padding: 10px;

    display: grid;
    
    /* States the length of the various columns. Can be in e.g. px or percentage. Most commonly used: fractions (fr).
    grid-template-columns: 300px 100px 300px;
    grid-template-columns: 30% 40% 30%; 

    This would make the last column 3 times wider than the first 2.
    grid-template-columsn 1fr 1fr 3fr; */
    
    /* Same as writing grid-template-columns: 1fr 1fr 1fr; */
    grid-template-columns: repeat(3, 1fr);

    /* Another way to handle responsiveness on this. 200px is the minimum width for each column. Once each column gets below 200px, content will start to wrap. */
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));

    /* Long-form for this would be:
    column-gap: 10px;
    row-gap: 10px; */
    gap: 10px;

    /* By default all rows will have a set height based on how much the content will fill up (in the "grid cell" with the most content). But if you want to control / make each grid cell have an equal height you can use this property. */
    /* grid-auto-rows: 200px; */

    /* Or just set min height to 100px and max height to auto to avoid overflow. */
    /* grid-auto-rows: minmax(100px, auto); */
    

    /* grid-template-rows = Like grid-template-columns but used for controlling the size of the grid rows instead. */
    /* grid-template-rows: 200px 100px 200px; */
    /* grid-template-rows: repeat(3, 1fr); */

    /* align-items = similar to flexbox alignment (y axis). Default value is stretched. */
    /* align-items: end; */

    /* justify-content = align things on the x axis. Visible only if we use something like grid-template-columns: repeat(3,100px); */
    /* justify-content: end; */

}

.item {
    background-color: steelblue;
    color: #fff;
    font-size: 20px;
    padding: 20px;
    border: skyblue 1px solid;
}


/* Various specific examples of content spanning over multiple rows, columns and cell-specific alignment. */
.item:nth-of-type(1) {
    /* Example of content spanning over multiple columns (start at column 1, end just before column 3 - so span over 2 columns in total). */
    background-color: #000;

    /* Same as grid-column: 1 / 3; */
    /* Same as grid-column: 1 / span 2; */
    grid-column-start: 1;
    grid-column-end: 3;
}

.item:nth-of-type(2) {
    /* Examples to control alignment of specific item. align-self = y axis. justify-self: x axis.
    height: 100px;
    width: 100px;
    align-self: end;
    justify-self: center; */
}

.item:nth-of-type(3) {
    /* Example of content spanning over multiple rows. */
    background-color: #333;
    grid-row: 2 / 4;
}

@media(max-width: 500px) {
    .container {
        grid-template-columns: 1fr;
    }

    .item:nth-of-type(1) {
        grid-column: 1 / 2;
    }

    .item:nth-of-type(3) {
        grid-row: 3 / 4;
    }
}